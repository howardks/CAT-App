@page "/account"

@inject NavigationManager NavigationManager
@using CAT_App.Data;

<h3>@(GetError()? "Error" : "Welcome, " + @User.Username + "!")</h3>
<p />
<div class="@(GetError()? "d-none" : "d-show")" width="100%" style="text-align: center">
	<span class="oi oi-wifi" style="padding: 2%; width: 10%; margin-bottom: 3%" @onclick="ChargeRide"/>
	<br />
	Hold Pass Next To Scanner
	<p />
	@if (User.AccountType.Equals("adult"))
	{
		<img src="/images/adultCard.png" />
	} else if (User.AccountType.Equals("child"))
	{
		<img src="/images/childCard.png" />
	}
	else if (User.AccountType.Equals("senior"))
	{
		<img src="/images/seniorCard.png" />
	}
	else if (User.AccountType.Equals("student"))
	{
		<img src="/images/studentCard.png" />
	}
	<p />
	Current Balance
	<h3>@User.GetBalance()</h3>
	<p />
	<button @onclick="@ChangeReloadMode">@(GetShowReload() ? "Close" : "Reload Card")</button>
	<button @onclick="@ChangeHistoryMode">@(GetShowHistory() ? "Hide History" : "Show History")</button>
	<div class="@(GetShowHistory()? "d-show" : "d-none")">
		<p />
		<table class="table">
			<tbody>
				<tr>
					<th>Activity</th>
					<th>Amount</th>
				</tr>
				@if (User.History != null)
				{
					for (int i = 0; i < User.History.GetLength(0); i++)
					{
						<tr>
							<td>@User.History[i, 0]</td>
							<td>@User.History[i, 1]</td>
						</tr>
					}
				}
			</tbody>
		</table>
		@if (User.History == null)
		{
			<span>No Transaction History</span>
		}
	</div>
	<div class="@(GetShowReload()? "d-show" : "d-none") p-3">
		<form>
			<label for="amount">Amount: </label>
			<br />
			<input id="amount" type="number" placeholder="0.00" @bind-value="increaseAmount" />
			<button class="m-2" @onclick="@ReloadCard">Submit</button>
		</form>
	</div>
</div>
<div class="@(GetError()? "d-show" : "d-none")">
	<p>@message</p>
	<button @onclick="@ClearError">Back</button>
</div>

@code {
	bool showHistory = false, showReload = false;
	static bool error = false;
	static string message;
	double increaseAmount;

	private async void ChargeRide()
	{
		string result = await User.DecreaseBalance();

		if (result.Equals("true"))
		{
			NavigationManager.NavigateTo("/account", true);
		}
		else
		{
			message = result;
			error = true;
			NavigationManager.NavigateTo("/account", true);
		}
	}

	private async void ReloadCard()
	{
		string result = await User.UpdateBalance("Reload Card", increaseAmount);

		if (!result.Equals("true"))
		{
			message = result;
			error = true;
			NavigationManager.NavigateTo("/account", true);
		}
	}

	private bool GetShowHistory()
	{
		return showHistory;
	}

	private bool GetShowReload()
	{
		return showReload;
	}

	private void ChangeHistoryMode()
	{
		showReload = false; 

		if (showHistory)
		{
			showHistory = false;
		}
		else
		{
			showHistory = true;
		}
	}

	private void ChangeReloadMode()
	{
		showHistory = false;

		if (showReload)
		{
			showReload = false;
		}
		else
		{
			showReload = true;
		}
	}

	private void ClearError()
	{
		error = false;
		message = null;
	}

	private bool GetError()
	{
		return error;
	}
}
